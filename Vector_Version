#include <iostream>
#include <vector>
#include <string>

using namespace std;

void carry(vector<short>& number);
void carry_for_decimal(vector<short>& number);
void carry_for_mutiple_and_divide(vector<short>& number, short& decimal_length);
vector<short> sum_for_mutiple(vector<short>number1, vector<short>number2);
vector<short> subtract_for_divide(vector<short>number1, vector<short>number2);
vector<short> mutiple(vector<short>number1, vector<short>number2);
vector<short> divide(vector<short>number1, vector<short>number2, short decimal_length1, short decimal_length2, short decimal_length);
vector<short> sum(vector<short>number1, vector<short>number2, bool positive1, bool positive2, short length);
vector<short> subtract(vector<short>number1, vector<short>number2, bool positive1, bool positive2, short length);
vector<short> sum_decimal(vector<short>number1, vector<short>number2, bool positive1, bool positive2, short length);
vector<short> subtract_decimal(vector<short>number1, vector<short>number2, bool positive1, bool positive2, short length);
void input2number_md(string input, vector<short>& number, short& decimal);
void input2number_ss(string input, vector<short>& number, vector<short>& decimal);

int main() {
	string input1, input2;
	input1.reserve(100),input2.reserve(100);
	short n;
	char instruction;
	while (cin >> n) {
		for (short i = 0;i < n;i++) {
			short decimal_length1 = 0, decimal_length2 = 0;
			cin >> instruction;
			cin >> input1 >> input2;
			vector<short> number1, number2, number, decimal, decimal_1, decimal_2;
			number1.reserve(60),number2.reserve(60),number.reserve(60);
			decimal.reserve(60),decimal_1.reserve(60),decimal_2.reserve(60);
			bool positive1 = 0, positive2 = 0, positive = 0, decimal1 = 0, decimal2 = 0;
			if (input1[0] != '-') 
				positive1 = 1;
			if (input2[0] != '-') 
				positive2 = 1;
			short decimal_length;
			if (instruction == '*' || instruction == '/') {
				if (positive1 && positive2) 
					positive = 1;
				input2number_md(input1, number1, decimal_length1);
				input2number_md(input2, number2, decimal_length2);
				if (instruction == '*') {
					if (number1.size() > number2.size())
						number = mutiple(number1, number2);
					else number = mutiple(number2, number1);
					decimal_length = decimal_length1 + decimal_length2;
					carry_for_mutiple_and_divide(number, decimal_length);
				}
				else {
					decimal_length = 11;
					if (decimal_length2 >= 7 && number2.size() - decimal_length2 == 1 && number2[0] == 0 && number2[1] == 0 && number2[2] == 0 && number2[3] == 0 && number2[4] == 0 && number2[5] == 0 && number2[6] == 0) {
						cout << "ERROR" << endl;
						continue;
					}
					number = divide(number1, number2, decimal_length1, decimal_length2, decimal_length);
					carry_for_mutiple_and_divide(number, decimal_length);
				}
				if (!positive) cout << "-";
				if (!number.size()) cout << 0;
				short first_output = 0;
				short j = 0;
				if (decimal_length > 10 && *(number.end() - 1) >= 5) {
					*(number.end() - 2) += 1;;
					carry_for_mutiple_and_divide(number, decimal_length);
				}
				if (number.size() - decimal_length > 3) {
					first_output = (number.size() - decimal_length) % 3;
					for (;j < first_output;j++)
						cout << number[j];
					if (first_output)
						cout << ",";
				}
				short o = 0;
				for (;o < number.size() - decimal_length - first_output;o++) {
					cout << number[o + j];
					if ((o + 1) % 3 == 0 && o + 1 != number.size() - decimal_length - first_output)
						cout << ",";
				}
				if (decimal_length > 0)
					cout << ".";
				for (short l = 0;l < decimal_length && l < 10;l++)
					cout << number[j + o + l];
				cout << endl;
			}
			else {
				input2number_ss(input1, number1, decimal_1);
				input2number_ss(input2, number2, decimal_2);
				short length = number1.size() > number2.size() ? number1.size() : number2.size();
				short decimal_length = decimal_1.size() > decimal_2.size() ? decimal_1.size() : decimal_2.size();
				if (instruction == '+') {
					number = sum(number1, number2, positive1, positive2, length);
					decimal = sum_decimal(decimal_1, decimal_2, positive1, positive2, decimal_length);
				}
				else {
					number = subtract(number1, number2, positive1, positive2, length);
					decimal = subtract_decimal(decimal_1, decimal_2, positive1, positive2, decimal_length);
				}
				bool change = 0;
				for (short j = 0;j < length;j++) {
					if (number[j] > 0) {
						change = 1;
						positive = 1;
						break;
					}
					else if (number[j] < 0) {
						change = 1;
						break;
					}
				}
				if (!change) {
					for (short j = 0;j < decimal_length;j++) {
						if (decimal[j] > 0) {
							positive = 1;
							break;
						}
						else if (decimal[j] < 0)
							break;
					}
				}
				if (!positive) {
					for (short j = 0;j < length;j++)
						number[j] = -number[j];
					if (decimal_length > 0)
						for (short j = 0;j < decimal_length;j++)
							decimal[j] = -decimal[j];
				}
				carry_for_decimal(decimal);
				if (decimal_length > 0)
					while (decimal.size() > 0 && !decimal[decimal.size() - 1]) {
						vector<short>new_decimal(decimal_length - 1, 0);
						for (short o = 0;o < decimal_length - 1;o++)
							new_decimal[o] = decimal[o];
						decimal = new_decimal;
					}
				if (decimal.size() > 0 && decimal[0] >= 10) {
					decimal[0] -= 10;
					number[length - 1]++;
				}
				else if (decimal_length > 0 && decimal[0] < 0) {
					decimal[0] += 10;
					number[length - 1]--;
				}
				carry(number);
				if (!number.size() && !decimal.size())
					positive = 1;
				if (!positive)
					cout << "-";
				if (!number.size())
					cout << 0;
				short first_output = 0;
				short j = 0;
				if (number.size() > 3) {
					first_output = length % 3;
					for (;j < first_output;j++)
						cout << number[j];
					if (first_output)
						cout << ",";
				}
				for (short o = 0;o < length - first_output;o++) {
					cout << number[o + j];
					if ((o + 1) % 3 == 0 && o + 1 != length - first_output)
						cout << ",";
				}
				if (decimal_length > 0)
					cout << ".";
				for (short o = 0;o < decimal_length;o++)
					cout << decimal[o];
				cout << endl;
			}
		}
	}
}

void carry(vector<short>& number) {
	for (short j = number.size() - 1;j >= 0;j--) {
		if (number[j] >= 10) {
			if (!j) {
				number.insert(number.begin(), number[j] / 10);
				number[1] /= 10;
			}
			else {
				number[j - 1] += number[j] / 10;
				number[j] %= 10;
			}
		}
		else if (number[j] < 0) {
			number[j] += 10;
			number[j - 1]--;
		}
	}
	while (number.size() > 0 && !number[0])
		number.erase(number.begin());
}
void carry_for_decimal(vector<short>& number) {
	for (short j = number.size() - 1;j > 0;j--) {
		if (number[j] >= 10) {
			number[j - 1] += number[j] / 10;
			number[j] %= 10;
		}
		else if (number[j] < 0) {
			number[j] += 10;
			number[j - 1]--;
		}
	}
	while (number.size() > 0 && !number[0])
		number.erase(number.begin());
}
void carry_for_mutiple_and_divide(vector<short>& number, short& decimal_length) {
	for (short j = number.size() - 1;j >= 0;j--) {
		if (number[j] >= 10) {
			if (!j) {
				number.insert(number.begin(), number[j] / 10);
				number[1] %= 10;
				j++;
			}
			else {
				number[j - 1] += number[j] / 10;
				number[j] %= 10;
			}
		}
		else if (number[j] < 0) {
			number[j] += 10;
			number[j - 1]--;
		}
	}
	while (!number[0] && number.size() > 0 && number.size() - decimal_length > 1)
		number.erase(number.begin());
	while (decimal_length > 0 && *(number.end() - 1) == 0) {
		number.pop_back();
		decimal_length--;
	}
}

vector<short> sum_for_mutiple(vector<short>number1, vector<short>number2) {//number1 is longer.
	vector<short> number(number1.size(), 0);
	for (short j = 0;j < number.size();j++)
		if (j < number2.size())
			number[number.size() - j - 1] = number1[number1.size() - j - 1] + number2[number2.size() - j - 1];
		else number[number.size() - j - 1] = number1[number1.size() - j - 1];
	return number;
}
vector<short> subtract_for_divide(vector<short>number1, vector<short>number2) {//number1(longer) subtract_for_divide number2.
	vector<short> number(number1.size(), 0);
	for (short j = 0;j < number.size();j++)
		if (j < number2.size())
			number[number.size() - j - 1] = number1[number1.size() - j - 1] - number2[number2.size() - j - 1];
		else number[number.size() - j - 1] = number1[number1.size() - j - 1];
	return number;
}
vector<short> mutiple(vector<short>number1, vector<short>number2) {//number1 is longer.
	vector<short>number(number1.size() * number2.size(), 0);
	for (short i = 0;i < number2.size();i++) {
		vector<short>temp_number(number1.size() + i, 0);
		for (short j = 0;j < number1.size();j++)
			temp_number[number1.size() - j - 1] = number2[number2.size() - i - 1] * number1[number1.size() - j - 1];
		number = sum_for_mutiple(number, temp_number);
	}
	return number;
}
vector<short> divide(vector<short>number1, vector<short>number2, short decimal_length1, short decimal_length2, short decimal_length) {
	vector<short> number;
	number.reserve(60);
	while (!number2[0]) number2.erase(number2.begin());
	short extra_zero = decimal_length - decimal_length1 + decimal_length2;
	short former_number2_size = number2.size();
	for (short i = 0;i < extra_zero;i++)
		number1.insert(number1.end(), 0);
	while (number2.size() < number1.size())
		number2.insert(number2.end(), 0);
	while (number2.size() >= former_number2_size) {
		short digit_result = 0;
		short former_number1_size = number1.size();
		while (1) {
			if (number1.size() == number2.size()) {
				short i = 0;
				for (;i < number1.size() - 1 && number1[i] == number2[i];i++);
				if (number1[i] - number2[i] < 0)
					break;
			}
			if (number1.size() < number2.size())
				break;
			number1 = subtract_for_divide(number1, number2);
			carry(number1);
			digit_result++;
		}
		number.push_back(digit_result);
		number2.pop_back();
	}
	return number;
}
vector<short> sum(vector<short>number1, vector<short>number2, bool positive1, bool positive2, short length) {
	vector<short>number(length, 0);
	for (short j = 0;j < length;j++) {
		if (positive1 && positive2) {
			if (j < (number1.size() > number2.size() ? number2.size() : number1.size()))
				number[length - j - 1] = number1[number1.size() - j - 1] + number2[number2.size() - j - 1];
			else number[length - j - 1] = number1.size() > number2.size() ? number1[length - j - 1] : number2[number2.size() - j - 1];
		}
		else if (positive1 && !positive2 && number1.size() > number2.size()) {
			if (j < number2.size())
				number[length - j - 1] = number1[number1.size() - j - 1] - number2[number2.size() - j - 1];
			else number[length - j - 1] = number1[length - j - 1];
		}
		else if (!positive1 && positive2 && number1.size() < number2.size()) {
			if (j < number1.size())
				number[length - j - 1] = number2[number2.size() - j - 1] - number1[number1.size() - j - 1];
			else number[length - j - 1] = number2[length - j - 1];
		}
		else if (positive1 && !positive2 && number1.size() == number2.size())
			number[length - j - 1] = number1[number1.size() - j - 1] - number2[number2.size() - j - 1];
		else if (positive1 && !positive2 && number1.size() < number2.size()) {
			if (j < number1.size())
				number[length - j - 1] = number1[number1.size() - j - 1] - number2[number2.size() - j - 1];
			else number[length - j - 1] = -number2[length - j - 1];
		}
		else if (!positive1 && positive2 && number1.size() > number2.size()) {
			if (j < number2.size())
				number[length - j - 1] = number2[number2.size() - j - 1] - number1[number1.size() - j - 1];
			else number[length - j - 1] = -number1[length - j - 1];
		}
		else if (!positive2 && !positive1) {
			if (j < (number1.size() > number2.size() ? number2.size() : number1.size()))
				number[length - j - 1] = -number1[number1.size() - j - 1] - number2[number2.size() - j - 1];
			else number[length - j - 1] = number1.size() > number2.size() ? -number1[length - j - 1] : -number2[number2.size() - j - 1];
		}
		else if (!positive1 && positive2 && number1.size() == number2.size())
			number[length - j - 1] = number2[number2.size() - j - 1] - number1[number1.size() - j - 1];
	}
	return number;
}
vector<short> subtract(vector<short>number1, vector<short>number2, bool positive1, bool positive2, short length) {
	vector<short>number(length, 0);
	for (short j = 0;j < length;j++) {
		if (positive1 && !positive2) {
			if (j < (number1.size() > number2.size() ? number2.size() : number1.size()))
				number[length - j - 1] = number1[number1.size() - j - 1] + number2[number2.size() - j - 1];
			else number[length - j - 1] = number1.size() > number2.size() ? number1[length - j - 1] : number2[number2.size() - j - 1];
		}
		else if (positive1 && positive2 && number1.size() > number2.size()) {
			if (j < number2.size())
				number[length - j - 1] = number1[number1.size() - j - 1] - number2[number2.size() - j - 1];
			else number[length - j - 1] = number1[length - j - 1];
		}
		else if (!positive1 && !positive2 && number1.size() < number2.size()) {
			if (j < number1.size())
				number[length - j - 1] = number2[number2.size() - j - 1] - number1[number1.size() - j - 1];
			else number[length - j - 1] = number2[length - j - 1];
		}
		else if (positive1 && positive2 && number1.size() == number2.size())
			number[length - j - 1] = number1[number1.size() - j - 1] - number2[number2.size() - j - 1];
		else if (!positive1 && !positive2 && number1.size() == number2.size())
			number[length - j - 1] = number2[number2.size() - j - 1] - number1[number1.size() - j - 1];
		else if (positive1 && positive2 && number1.size() < number2.size()) {
			if (j < number1.size())
				number[length - j - 1] = number1[number1.size() - j - 1] - number2[number2.size() - j - 1];
			else number[length - j - 1] = -number2[length - j - 1];
		}
		else if (!positive1 && !positive2 && number1.size() > number2.size()) {
			if (j < number2.size())
				number[length - j - 1] = number2[number2.size() - j - 1] - number1[number1.size() - j - 1];
			else number[length - j - 1] = -number1[length - j - 1];
		}
		else if (!positive1 && positive2) {
			if (j < (number1.size() > number2.size() ? number2.size() : number1.size()))
				number[length - j - 1] = -number1[number1.size() - j - 1] - number2[number2.size() - j - 1];
			else number[length - j - 1] = number1.size() > number2.size() ? -number1[length - j - 1] : -number2[number2.size() - j - 1];
		}
	}
	return number;
}
vector<short> sum_decimal(vector<short>number1, vector<short>number2, bool positive1, bool positive2, short length) {
	vector<short>number(length, 0);
	for (short j = 0;j < length;j++) {
		if (positive1 && positive2) {
			if (j < (number1.size() > number2.size() ? number2.size() : number1.size()))
				number[j] = number1[j] + number2[j];
			else number[j] = number1.size() > number2.size() ? number1[j] : number2[j];
		}
		else if (positive1 && !positive2 && number1.size() > number2.size()) {
			if (j < number2.size())
				number[j] = number1[j] - number2[j];
			else number[j] = number1[j];
		}
		else if (!positive1 && positive2 && number1.size() < number2.size()) {
			if (j < number1.size())
				number[j] = number2[j] - number1[j];
			else number[j] = number2[j];
		}
		else if (positive1 && !positive2 && number1.size() == number2.size())
			number[j] = number1[j] - number2[j];
		else if (!positive1 && positive2 && number1.size() == number2.size())
			number[j] = number2[j] - number1[j];
		else if (positive1 && !positive2 && number1.size() < number2.size()) {
			if (j < number1.size())
				number[j] = number1[j] - number2[j];
			else number[j] = -number2[j];
		}
		else if (!positive1 && positive2 && number1.size() > number2.size()) {
			if (j < number2.size())
				number[j] = number2[j] - number1[j];
			else number[j] = -number1[j];
		}
		else if (!positive2 && !positive1) {
			if (j < (number1.size() > number2.size() ? number2.size() : number1.size()))
				number[j] = -number1[j] - number2[j];
			else number[j] = number1.size() > number2.size() ? -number1[j] : -number2[j];
		}
	}
	return number;
}
vector<short> subtract_decimal(vector<short>number1, vector<short>number2, bool positive1, bool positive2, short length) {
	vector<short>number(length, 0);
	for (short j = 0;j < length;j++) {
		if (positive1 && !positive2) {
			if (j < (number1.size() > number2.size() ? number2.size() : number1.size()))
				number[j] = number1[j] + number2[j];
			else number[j] = number1.size() > number2.size() ? number1[j] : number2[j];
		}
		else if (positive1 && positive2 && number1.size() > number2.size()) {
			if (j < number2.size())
				number[j] = number1[j] - number2[j];
			else number[j] = number1[j];
		}
		else if (!positive1 && !positive2 && number1.size() < number2.size()) {
			if (j < number1.size())
				number[j] = number2[j] - number1[j];
			else number[j] = number2[j];
		}
		else if (positive1 && positive2 && number1.size() == number2.size())
			number[j] = number1[j] - number2[j];
		else if (!positive1 && !positive2 && number1.size() == number2.size())
			number[j] = number2[j] - number1[j];
		else if (positive1 && positive2 && number1.size() < number2.size()) {
			if (j < number1.size())
				number[j] = number1[j] - number2[j];
			else number[j] = -number2[j];
		}
		else if (!positive1 && !positive2 && number1.size() > number2.size()) {
			if (j < number2.size())
				number[j] = number2[j] - number1[j];
			else number[j] = -number1[j];
		}
		else if (!positive1 && positive2) {
			if (j < (number1.size() > number2.size() ? number2.size() : number1.size()))
				number[j] = -number1[j] + number2[j];
			else number[j] = number1.size() > number2.size() ? -number1[j] : -number2[j];
		}
	}
	return number;
}

void input2number_md(string input, vector<short>& number, short& decimal_length) {
	bool decimal = 0;
	for (short j = 0;j < input.size();j++) {
		if ((int)input[j] >= 48 && (int)input[j] <= 57)
			number.push_back(input[j] - 48);
		if (decimal) decimal_length++;
		if (input[j] == '.')
			decimal = 1;
	}
}
void input2number_ss(string input, vector<short>& number, vector<short>& decimal) {
	for (short j = 0;j < input.size();j++) {
		if ((int)input[j] >= 48 && (int)input[j] <= 57)
			number.push_back(input[j] - 48);
		if (input[j] == '.')
			for (;j < input.size();j++)
				if ((int)input[j] >= 48 && (int)input[j] <= 57)
					decimal.push_back(input[j] - 48);
	}
}
